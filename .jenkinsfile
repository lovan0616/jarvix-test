pipeline {
    agent any
    environment {
        GIT_INFO = sh(script: 'git log -1 --pretty=format:"%h - %an : %s"', , returnStdout: true).trim()

        ARTIFACT_NAME           = "dist.tar.gz"
    }

    stages {
        stage('Starting') {
            steps {
                sh '~/.scripts/multibranch_notify_v1.sh jarvix-bot starting'
            }
        }

        stage('Version') {
            steps {
                sh '''
                    rm -f version
                    echo "ref=${GIT_BRANCH}"  >> version
                    echo "hash=${GIT_COMMIT}" >> version
               '''
            }
        }

        stage('Build') {
            steps {
                sh '''
                    npm install
                    npm run build
                    cp version dist/
                '''
            }
        }

        stage('Artifact') {
            steps {
                sh '''
                    set +e
                    # dist
                    tar -C dist -zcf ${ARTIFACT_NAME} .
                    exitcode=$?
                    if [ "$exitcode" != "1" ] && [ "$exitcode" != "0" ]; then
                        exit $exitcode
                    fi
                    set -e

                    set +x
                    curl -v -f -u ${NEXUS_USER}:${NEXUS_PASS} \
                        --upload-file ${ARTIFACT_NAME} \
                        ${NEXUS_HTTP_HOST}/repository/synergies/jarvix/${JOB_NAME}/${ARTIFACT_NAME}
                    set -x
                '''
            }
        }

        stage('Checkout script') {
            steps {
                script {
                    checkout([$class: 'GitSCM',
                        branches: [[name: "master"]],
                        userRemoteConfigs: [[
                            url: 'https://gitlab.com/synergies.ai/devops/ansible.git',
                            credentialsId: '6aec5db7-0064-4cf8-ba7f-3781d2fd5bbc'
                        ]]
                    ])
                }
            }
        }

        stage('Deploy - jenkins-pipe') {
            when { branch 'jenkins-pipe' }
            environment {
                INVENTORY = "inventory_jarvix/dev/hosts.yaml"
            }
            steps {
                sh '''
                    ansible-playbook jarvix/playbook/borabora/borabora-download.yaml -e "artifact_path=${JOB_NAME}"
                    ansible-playbook -i $INVENTORY jarvix/playbook/borabora/borabora-config.yaml
                    #ansible-playbook -i $INVENTORY jarvix/playbook/borabora/borabora-setup.yaml
                '''
            }
        }

        stage('Deploy - dev') {
            when { branch 'develop' }
            environment {
                INVENTORY = "inventory_jarvix/dev/hosts.yaml"
            }
            steps {
                sh '''
                    ansible-playbook -i $INVENTORY jarvix/playbook/borabora-setup.yaml -e "artifact_path=${JOB_NAME}"
                '''
            }
        }

        stage('Deploy - qa') {
            when { branch 'qa' }
            environment {
                INVENTORY = "inventory_jarvix/qa/hosts.yaml"
            }
            steps {
                sh '''
                    ansible-playbook -i $INVENTORY jarvix/playbook/borabora-setup.yaml -e "artifact_path=${JOB_NAME}"
                '''
            }
        }
    }

    post {
        success {
            sh '~/.scripts/multibranch_notify_v1.sh jarvix-bot success'
        }
        failure {
            sh '~/.scripts/multibranch_notify_v1.sh jarvix-bot failure'
        }
        cleanup {
            deleteDir()
        }
    }
}
